From c1d2a8297061d2b09cf5cded51254fa955bd70d2 Mon Sep 17 00:00:00 2001
From: Chaitanya Tata <Chaitanya.Tata@imgtec.com>
Date: Thu, 7 Jul 2016 22:52:39 +0530
Subject: uccp420wlan: Tx Data path Fixes

1) free_token is not called holding the tx_lock leading to negative
outstanding_tokens due to a race condition.

2) After queueing, check for aggregation policy, if it fails
do not wait for the queue to reach max_agg_len, instead try to
send immediately. This logic is protected by "enable_early_agg_checks"
variable in the proc.

This improves Tx latency.

3) Add some statistics for debugging.

Change-Id: Ie721ad14a2528bfa0b97a77b9fdc9f7473e070bf
Signed-off-by: Chaitanya Tata <chaitanya.tata@imgtec.com>
---
 drivers/net/wireless/uccp420wlan/inc/core.h     |   7 +
 drivers/net/wireless/uccp420wlan/src/80211_if.c |  40 +++++
 drivers/net/wireless/uccp420wlan/src/tx.c       | 199 ++++++++++++++++--------
 drivers/net/wireless/uccp420wlan/src/umac_if.c  |  12 +-
 4 files changed, 188 insertions(+), 70 deletions(-)
 mode change 100644 => 100755 drivers/net/wireless/uccp420wlan/inc/core.h

diff --git a/drivers/net/wireless/uccp420wlan/inc/core.h b/drivers/net/wireless/uccp420wlan/inc/core.h
old mode 100644
new mode 100755
index 5970584..35cd4cd
--- a/drivers/net/wireless/uccp420wlan/inc/core.h
+++ b/drivers/net/wireless/uccp420wlan/inc/core.h
@@ -220,6 +220,7 @@ struct wifi_params {
 	unsigned char is_associated;
 	unsigned char rate_protection_type;
 	unsigned char num_spatial_streams;
+	unsigned char enable_early_agg_checks;
 	unsigned char uccp_num_spatial_streams;
 	unsigned char auto_sensitivity;
 	/*RF Params: Input to the RF for operation*/
@@ -328,6 +329,12 @@ struct wifi_stats {
 	unsigned int gen_cmd_send_count;
 	unsigned int tx_cmd_send_count_single;
 	unsigned int tx_cmd_send_count_multi;
+
+	unsigned int tx_noagg_not_qos;
+	unsigned int tx_noagg_not_ampdu;
+	unsigned int tx_noagg_not_addr;
+
+	unsigned int tx_cmd_send_count_beaconq;
 	unsigned int tx_done_recv_count;
 	unsigned int rx_packet_mgmt_count;
 	unsigned int rx_packet_data_count;
diff --git a/drivers/net/wireless/uccp420wlan/src/80211_if.c b/drivers/net/wireless/uccp420wlan/src/80211_if.c
index e29a713..2239c75 100644
--- a/drivers/net/wireless/uccp420wlan/src/80211_if.c
+++ b/drivers/net/wireless/uccp420wlan/src/80211_if.c
@@ -2966,6 +2966,8 @@ static int proc_read_config(struct seq_file *m, void *v)
 		   wifi->params.num_spatial_streams);
 	seq_printf(m, "uccp_num_spatial_streams (UCCP Init) = %d\n",
 		   wifi->params.uccp_num_spatial_streams);
+	seq_printf(m, "enable_early_agg_checks = %d\n",
+		   wifi->params.enable_early_agg_checks);
 	seq_printf(m, "antenna_sel (UCCP Init) = %d\n",
 		   wifi->params.antenna_sel);
 	seq_printf(m, "max_data_size = %d (%dK)\n",
@@ -3446,6 +3448,12 @@ static int proc_read_mac_stats(struct seq_file *m, void *v)
 		   wifi->stats.tx_cmds_from_stack);
 	seq_printf(m, "tx_dones_to_stack= %d\n",
 		   wifi->stats.tx_dones_to_stack);
+	seq_printf(m, "tx_noagg_not_addr= %d\n",
+		   wifi->stats.tx_noagg_not_addr);
+	seq_printf(m, "tx_noagg_not_ampdu= %d\n",
+		   wifi->stats.tx_noagg_not_ampdu);
+	seq_printf(m, "tx_noagg_not_qos= %d\n",
+		   wifi->stats.tx_noagg_not_qos);
 	seq_printf(m, "oustanding_cmd_cnt = %d\n",
 		   wifi->stats.outstanding_cmd_cnt);
 	seq_printf(m, "gen_cmd_send_count = %d\n",
@@ -3458,12 +3466,37 @@ static int proc_read_mac_stats(struct seq_file *m, void *v)
 		   wifi->stats.tx_cmd_send_count_single);
 	seq_printf(m, "tx_cmd_send_count_multi = %d\n",
 		   wifi->stats.tx_cmd_send_count_multi);
+	seq_printf(m, "tx_cmd_send_count_beacon_q = %d\n",
+		   wifi->stats.tx_cmd_send_count_beaconq);
 	seq_printf(m, "tx_done_recv_count = %d\n",
 		   wifi->stats.tx_done_recv_count);
 
 	dev = (struct mac80211_dev *)(wifi->hw->priv);
 	seq_printf(m, "tx_buff_pool_map = %ld\n",
 		   dev->tx.buf_pool_bmp[0]);
+	{
+		int i, j;
+		struct sk_buff_head *pend_pkt_q;
+
+		seq_puts(m, "Pending Qs status\n");
+		for (i = 0; i < MAX_PEERS; i++) {
+			if (!dev->peers[i])
+				continue;
+
+			for (j = 0; j < WLAN_AC_MAX_CNT; j++) {
+				spin_lock_bh(&dev->tx.lock);
+				pend_pkt_q = &dev->tx.pending_pkt[0][i][j];
+				if (skb_queue_len(pend_pkt_q))
+					seq_printf(m, "ac:%d peer:%d = %d\n",
+						   j,
+						   i,
+						   skb_queue_len(pend_pkt_q));
+				spin_unlock_bh(&dev->tx.lock);
+			}
+		}
+		seq_puts(m, "\n");
+	}
+
 	if (ftm)
 		seq_printf(m, "pdout_val = %d (total samples: %d)\n",
 			   total_samples ? (total_value/total_samples) : 0,
@@ -3720,6 +3753,12 @@ static ssize_t proc_write_config(struct file *file,
 		} else
 			pr_err("Invalid parameter value: Allowed Range: 1 to %d\n",
 			       min(MAX_TX_STREAMS, MAX_RX_STREAMS));
+	} else if (param_get_val(buf, "enable_early_agg_checks=", &val)) {
+		if ((val == 0) || (val == 1)) {
+			if (val != wifi->params.enable_early_agg_checks)
+				wifi->params.enable_early_agg_checks = val;
+		} else
+			pr_err("Invalid parameter value: Allowed: 0/1\n");
 	} else if (param_get_val(buf, "antenna_sel=", &val)) {
 		if (val == 1 || val == 2) {
 			if (val != wifi->params.antenna_sel) {
@@ -4582,6 +4621,7 @@ static int proc_init(struct proc_dir_entry ***main_dir_entry)
 	if (num_streams_vpd > 0)
 		wifi->params.uccp_num_spatial_streams = num_streams_vpd;
 
+	wifi->params.enable_early_agg_checks = 1;
 	wifi->params.bt_state = 1;
 	wifi->params.mgd_mode_tx_fixed_mcs_indx = -1;
 	wifi->params.mgd_mode_tx_fixed_rate = -1;
diff --git a/drivers/net/wireless/uccp420wlan/src/tx.c b/drivers/net/wireless/uccp420wlan/src/tx.c
index a89df9a..e81ffcc 100644
--- a/drivers/net/wireless/uccp420wlan/src/tx.c
+++ b/drivers/net/wireless/uccp420wlan/src/tx.c
@@ -89,6 +89,72 @@ static void update_aux_adc_voltage(struct mac80211_dev *dev,
 	dev->params->pdout_voltage[index++] = pdout;
 }
 
+static int check_80211_aggregation(struct mac80211_dev *dev,
+				   struct sk_buff *skb,
+				   int ac,
+#ifdef MULTI_CHAN_SUPPORT
+				   int off_chanctx_idx,
+#endif
+				   int peer_id)
+{
+	struct ieee80211_tx_info *tx_info = IEEE80211_SKB_CB(skb);
+	struct ieee80211_hdr *mac_hdr = NULL, *mac_hdr_first = NULL;
+	struct sk_buff *skb_first;
+	struct sk_buff_head *pend_pkt_q = NULL;
+	struct tx_config *tx = &dev->tx;
+	bool ampdu = false, is_qos = false, addr = true;
+
+	mac_hdr = (struct ieee80211_hdr *)skb->data;
+#ifdef MULTI_CHAN_SUPPORT
+	pend_pkt_q = &tx->pending_pkt[off_chanctx_idx][peer_id][ac];
+#else
+	pend_pkt_q = &tx->pending_pkt[peer_id][ac];
+#endif
+	skb_first = skb_peek(pend_pkt_q);
+	if (skb_first)
+		mac_hdr_first = (struct ieee80211_hdr *)skb_first->data;
+
+	ampdu = (tx_info->flags & IEEE80211_TX_CTL_AMPDU) ? true : false;
+	is_qos = ieee80211_is_data_qos(mac_hdr->frame_control);
+
+	/* RPU has a limitation, it expects A1-A2-A3 to be same
+	* for all MPDU's within an AMPDU. This is a temporary
+	* solution, remove it when RPU has fix for this.
+	*/
+	if (skb_first &&
+	    ((!ether_addr_equal(mac_hdr->addr1,
+		       mac_hdr_first->addr1)) ||
+	    (!ether_addr_equal(mac_hdr->addr2,
+		       mac_hdr_first->addr2)) ||
+	    (!ether_addr_equal(mac_hdr->addr3,
+		       mac_hdr_first->addr3)))) {
+		addr = false;
+	}
+
+	/*stats and debug*/
+	if (!is_qos) {
+		UCCP_DEBUG_TX("Not Qos\n");
+		dev->stats->tx_noagg_not_qos++;
+	} else if (!ampdu) {
+		UCCP_DEBUG_TX("Not AMPDU\n");
+		dev->stats->tx_noagg_not_ampdu++;
+	} else if (!addr) {
+		if (skb_first) {
+			UCCP_DEBUG_TX("first: A1: %pM-A2:%pM -A3%pM not same\n",
+				      mac_hdr_first->addr1,
+				      mac_hdr_first->addr2,
+				      mac_hdr_first->addr3);
+			UCCP_DEBUG_TX("curr:  A1: %pM-A2:%pM -A3%pM not same\n",
+				      mac_hdr->addr1,
+				      mac_hdr->addr2,
+				      mac_hdr->addr3);
+		}
+		dev->stats->tx_noagg_not_addr++;
+	}
+
+	return (ampdu && is_qos && addr);
+}
+
 static void tx_status(struct sk_buff *skb,
 		      struct umac_event_tx_done *tx_done,
 		      unsigned int frame_idx,
@@ -266,7 +332,6 @@ static int get_token(struct mac80211_dev *dev,
 		     token_id++) {
 			curr_bit = (token_id % TX_DESC_BUCKET_BOUND);
 			pool_id = (token_id / TX_DESC_BUCKET_BOUND);
-			/* Do not set, we will queue to the same token */
 			if (!test_and_set_bit(curr_bit,
 					      &tx->buf_pool_bmp[pool_id])) {
 				tx->outstanding_tokens[queue]++;
@@ -285,13 +350,22 @@ void free_token(struct mac80211_dev *dev,
 	struct tx_config *tx = &dev->tx;
 	int bit = -1;
 	int pool_id = -1;
-
+	int test = 0;
+	unsigned int old_token = tx->outstanding_tokens[queue];
 	bit = (token_id % TX_DESC_BUCKET_BOUND);
 	pool_id = (token_id / TX_DESC_BUCKET_BOUND);
 
 	__clear_bit(bit, &tx->buf_pool_bmp[pool_id]);
 
 	tx->outstanding_tokens[queue]--;
+
+	test = tx->outstanding_tokens[queue];
+	if (WARN_ON_ONCE(test < 0 || test > 4)) {
+		pr_warn("%s: invalid outstanding_tokens: %d, old:%d\n",
+			__func__,
+			test,
+			old_token);
+	}
 }
 
 
@@ -578,10 +652,7 @@ int uccp420wlan_tx_proc_pend_frms(struct mac80211_dev *dev,
 	unsigned long ampdu_len = 0;
 	struct sk_buff *loop_skb = NULL;
 	struct sk_buff *tmp = NULL;
-	struct sk_buff *skb_first = NULL;
-	struct ieee80211_hdr *mac_hdr_first = NULL;
 	struct ieee80211_hdr *mac_hdr = NULL;
-	struct ieee80211_tx_info *tx_info_first = NULL;
 	struct ieee80211_tx_info *tx_info = NULL;
 	struct umac_vif *uvif = NULL;
 	struct ieee80211_vif *ivif = NULL;
@@ -592,7 +663,7 @@ int uccp420wlan_tx_proc_pend_frms(struct mac80211_dev *dev,
 	unsigned int total_pending_processed = 0;
 	int pend_pkt_q_len = 0;
 	struct curr_peer_info peer_info;
-
+	int loop_cnt = 0;
 	peer_info = get_curr_peer_opp(dev,
 #ifdef MULTI_CHAN_SUPPORT
 				       curr_chanctx_idx,
@@ -616,24 +687,6 @@ int uccp420wlan_tx_proc_pend_frms(struct mac80211_dev *dev,
 	txq = &dev->tx.pkt_info[token_id].pkt;
 #endif
 
-	skb_first = skb_peek(pend_pkt_q);
-
-	if (skb_first == NULL)
-		pr_err("%s:%d Null SKB: peer: %d\n",
-		       __func__,
-		       __LINE__,
-		       peer_info.id);
-
-	mac_hdr_first = (struct ieee80211_hdr *)skb_first->data;
-
-	tx_info_first = IEEE80211_SKB_CB(skb_first);
-
-	/* Temp Checks for Aggregation: Will be removed later*/
-	if (vht_support)
-		if ((tx_info_first->control.rates[0].flags &
-		     IEEE80211_TX_RC_MCS) &&
-		    max_tx_cmds > MAX_SUBFRAMES_IN_AMPDU_HT)
-			max_tx_cmds = MAX_SUBFRAMES_IN_AMPDU_HT;
 
 	/* Aggregate Only MPDU's with same RA, same Rate,
 	 * same Rate flags, same Tx Info flags
@@ -651,34 +704,28 @@ int uccp420wlan_tx_proc_pend_frms(struct mac80211_dev *dev,
 
 		ampdu_len += loop_skb->len;
 
-		if (!ieee80211_is_data(mac_hdr->frame_control) ||
-		    !(tx_info->flags & IEEE80211_TX_CTL_AMPDU) ||
-		    (skb_queue_len(txq) >= max_tx_cmds) ||
-#if 0
-		    (memcmp(&tx_info_first->control.rates[0],
-			    &tx_info->control.rates[0],
-			    sizeof(struct ieee80211_tx_rate) *
-			    IEEE80211_TX_MAX_RATES) != 0) ||
-		    (tx_info_first->flags != tx_info->flags) ||
-#endif
-		    /* RPU has a limitation, it expects A1-A2-A3 to be same
-		     * for all MPDU's within an AMPDU. This is a temporary
-		     * solution, remove it when RPU has fix for this.
-		     */
-		    (!ether_addr_equal(mac_hdr->addr1,
-				       mac_hdr_first->addr1)) ||
-		    (!ether_addr_equal(mac_hdr->addr2,
-				       mac_hdr_first->addr2)) ||
-		    (!ether_addr_equal(mac_hdr->addr3,
-				       mac_hdr_first->addr3)))
+		/* Temp Checks for Aggregation: Will be removed later*/
+		if (vht_support && !loop_cnt)
+			if ((tx_info->control.rates[0].flags &
+			     IEEE80211_TX_RC_MCS) &&
+			    max_tx_cmds > MAX_SUBFRAMES_IN_AMPDU_HT)
+				max_tx_cmds = MAX_SUBFRAMES_IN_AMPDU_HT;
+		if (!check_80211_aggregation(dev,
+					     loop_skb,
+					     ac,
+					     curr_chanctx_idx,
+					     peer_info.id) ||
+		    (skb_queue_len(txq) >= max_tx_cmds)) {
 			break;
-
+		}
+		loop_cnt++;
 		__skb_unlink(loop_skb, pend_pkt_q);
-
 		skb_queue_tail(txq, loop_skb);
 	}
 
-	/* If our criterion rejects all pending frames, send only 1 */
+	/* If our criterion rejects all pending frames, or
+	 * pend_q is empty, send only 1
+	 */
 	if (!skb_queue_len(txq))
 		skb_queue_tail(txq, skb_dequeue(pend_pkt_q));
 
@@ -715,7 +762,8 @@ int uccp420wlan_tx_alloc_token(struct mac80211_dev *dev,
 	struct tx_config *tx = &dev->tx;
 	struct sk_buff_head *pend_pkt_q = NULL;
 	unsigned int pkts_pend = 0;
-
+	struct ieee80211_tx_info *tx_info;
+	unsigned int pend_q_len = 0;
 	spin_lock_bh(&tx->lock);
 
 #ifdef MULTI_CHAN_SUPPORT
@@ -724,7 +772,6 @@ int uccp420wlan_tx_alloc_token(struct mac80211_dev *dev,
 #else
 	pend_pkt_q = &tx->pending_pkt[peer_id][ac];
 #endif
-
 #ifdef MULTI_CHAN_SUPPORT
 	UCCP_DEBUG_TX("%s-UMACTX:Alloc buf Req q = %d off_chan: %d\n",
 					dev->name,
@@ -739,15 +786,30 @@ int uccp420wlan_tx_alloc_token(struct mac80211_dev *dev,
 
 	/* Queue the frame to the pending frames queue */
 	skb_queue_tail(pend_pkt_q, skb);
+	pend_q_len = skb_queue_len(pend_pkt_q);
+
+	tx_info = IEEE80211_SKB_CB(skb);
 
-	/* If the number of outstanding Tx tokens is greater than
-	 * NUM_TX_DESCS_PER_AC we try and encourage aggregation to the max size
-	 * supported (dev->params->max_tx_cmds)
-	 */
 	if (tx->outstanding_tokens[ac] >= NUM_TX_DESCS_PER_AC) {
-		if ((skb_queue_len(pend_pkt_q) < dev->params->max_tx_cmds) ||
-		   ac == WLAN_AC_BCN)
-			goto out;
+		bool agg_status = check_80211_aggregation(dev,
+						      skb,
+						      ac,
+						      off_chanctx_idx,
+						      peer_id);
+
+		if (agg_status || !dev->params->enable_early_agg_checks) {
+			/* encourage aggregation to the max size
+			 * supported (dev->params->max_tx_cmds)
+			 */
+			if (pend_q_len < dev->params->max_tx_cmds) {
+				UCCP_DEBUG_TX("tx:pend_q not full out_tok:%d\n",
+					      tx->outstanding_tokens[ac]);
+				goto out;
+			 } else {
+				UCCP_DEBUG_TX("tx:pend_q full out_tok:%d\n",
+					      tx->outstanding_tokens[ac]);
+			}
+		}
 	}
 
 	/* Take steps to stop the TX traffic if we have reached
@@ -757,7 +819,7 @@ int uccp420wlan_tx_alloc_token(struct mac80211_dev *dev,
 	 * the shared ROC queue (which is VO right now), since this would block
 	 * ROC traffic too.
 	 */
-	if (skb_queue_len(pend_pkt_q) >= MAX_TX_QUEUE_LEN) {
+	if (pend_q_len >= MAX_TX_QUEUE_LEN) {
 		if ((!dev->roc_params.roc_in_progress) ||
 		    (dev->roc_params.roc_in_progress &&
 		     (ac != UMAC_ROC_AC))) {
@@ -863,7 +925,11 @@ int uccp420wlan_tx_free_buff_req(struct mac80211_dev *dev,
 	chanctx_idx = tx->desc_chan_map[desc_id];
 	if (chanctx_idx == -1) {
 		spin_unlock_bh(&tx->lock);
-		pr_err("%s: Unexpected channel context\n", __func__);
+		pr_err("%s: Unexpected channel context:tok:%d q:%d\n",
+		       __func__,
+		       desc_id,
+		       tx_done->queue);
+		free_token(dev, desc_id, tx_done->queue);
 		goto out;
 	}
 	pkt_info = &dev->tx.pkt_info[chanctx_idx][desc_id];
@@ -939,12 +1005,20 @@ int uccp420wlan_tx_free_buff_req(struct mac80211_dev *dev,
 		}
 	}
 
+	if (!pkts_pend) {
+		/* Mark the token as available */
+		free_token(dev, desc_id, tx_done->queue);
+#ifdef MULTI_CHAN_SUPPORT
+		dev->tx.desc_chan_map[desc_id] = -1;
+#endif
+	}
+
 	/* Unlock: Give a chance for Tx to add to pending lists */
 	spin_unlock_bh(&tx->lock);
 
 	/* Protection from mac80211 _ops especially stop */
 	if (dev->state != STARTED)
-		return 0;
+		goto out;
 
 	if (!skb_queue_len(&tx_done_list))
 		goto out;
@@ -1752,13 +1826,6 @@ void uccp420wlan_tx_complete(struct umac_event_tx_done *tx_done,
 #ifdef MULTI_CHAN_SUPPORT
 out:
 #endif
-	if (!pkts_pending) {
-		/* Mark the token as available */
-		free_token(dev, token_id, tx_done->queue);
-#ifdef MULTI_CHAN_SUPPORT
-		dev->tx.desc_chan_map[token_id] = -1;
-#endif
-	}
 
 	for (vif_index = 0; vif_index < MAX_VIFS; vif_index++) {
 		if (vif_index_bitmap & (1 << vif_index)) {
diff --git a/drivers/net/wireless/uccp420wlan/src/umac_if.c b/drivers/net/wireless/uccp420wlan/src/umac_if.c
index 3319075..f561595 100644
--- a/drivers/net/wireless/uccp420wlan/src/umac_if.c
+++ b/drivers/net/wireless/uccp420wlan/src/umac_if.c
@@ -1696,10 +1696,14 @@ int uccp420wlan_prog_tx(unsigned int queue,
 		/* increment tx_cmd_send_count to keep track of number of
 		 * tx_cmd send
 		 */
-		if (skb_queue_len(txq) == 1)
-			dev->stats->tx_cmd_send_count_single++;
-		else if (skb_queue_len(txq) > 1)
-			dev->stats->tx_cmd_send_count_multi++;
+		if (queue != WLAN_AC_BCN) {
+			if (skb_queue_len(txq) == 1)
+				dev->stats->tx_cmd_send_count_single++;
+			else if (skb_queue_len(txq) > 1)
+				dev->stats->tx_cmd_send_count_multi++;
+		} else {
+			dev->stats->tx_cmd_send_count_beaconq++;
+		}
 #ifdef PERF_PROFILING
 	}
 #endif
-- 
2.6.2

